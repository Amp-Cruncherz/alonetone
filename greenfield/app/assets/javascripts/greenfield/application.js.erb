//= require jquery
//= require jquery-fileupload/basic
//= require soundmanager2
//= require greenfield/resize_textarea
//= require greenfield/waveform
//= require greenfield/baseline

var soundIsReady = true;

soundManager.debugMode = true;
soundManager.flashVersion = 9;
soundManager.useHTML5Audio = true; /* for acl, baby */
soundManager.consoleOnly = true;
soundManager.url = '<%= asset_path('soundmanager2_flash9.swf')%>';

$(function() {
  $('input[type=file].mp3_upload').each(function() {
    var field = $(this);
    var container = field.parent();
    var results = container.find('.supporting_file_list');
    field.fileupload({
      dataType: 'json',
      //acceptFileTypes: /(\.|\/)(mp3)$/i,
      add: function(e, data) {
        var result = $('<li class="file fa fa-li">');
        result.append($('<div class="name">').text(data.files[0].name));
        result.append($('<div class="status">'));
        results.append(result);

        data.formData = null;
        data.context = result;
        data.submit();
      },

      done: function(e, data) {
        data.context.find('.status').html(data.result.status);
        data.context.removeClass('complete');
        if (!data.result.success){
          data.context.addClass('fa-times');
        }
        else{
          data.context.addClass('fa-check-square');
        }
      },

      progress: function(e, data) {
        var pct = parseInt(data.loaded / data.total * 100, 10);
        if (pct == 100) {
          data.context && data.context.find('.status').text('Processing...');
        } else {
          data.context && data.context.find('.status').text(pct+'%');
        }
      }
    });
  });

  $(document).on('click', '.play-button', function(e) {
    e.preventDefault();

    var container = $(this);
    var url = $(this).find('a').attr('href');
    var soundID = url.split('/').pop().split('.')[0];

    container.removeClass('play-button fa-play').addClass('pause-button fa-pause');
    soundManager.getSoundById(soundID).play();
  });

  $(document).on('click', '.pause-button', function(e) {
    e.preventDefault();

    var container = $(this);
    var url = $(this).find('a').attr('href');
    var soundID = url.split('/').pop().split('.')[0];
    container.removeClass('pause-button fa-pause').addClass('play-button fa-play');
    soundManager.pause(soundID);
  });

  $('.waveform').each(function() {
    var data = $(this).data('waveform').split(',').map(function(s) {
      return parseFloat(s);
    });

    var max = Math.max.apply(Math, data),
        min = Math.min.apply(Math, data);

    var scale = Math.max(Math.abs(max), Math.abs(min));
    data = data.map(function(s) {
      return (s < 0 ? -1 : 1 ) * Math.pow(Math.abs(s) / scale, 1/4);
    });

    var soundPosition = 0;
    var hoverPosition = -1;
    var waveform = new Waveform({
      container: this,
      innerColor: function(percent, _) {
        if (percent < soundPosition)
          return '#302f2f';
        else
          return '#c7c6c3';
      },
      data: data
    });

    var scrubber = $(this);
    var player = $(this).parents('.player');
    var seekbar = player.find('.seekbar');
    var index = player.find('.time .index');
    var url = player.find('.play-control a').attr('href');
    var soundID = url.split('/').pop().split('.')[0];

    soundManager.onready(function() {
      var sound = soundManager.createSound({
        id: soundID,
        url: url,
        autoLoad: true,
        onfinish: function() {
          player.find('.play-control').
            removeClass('pause-button').addClass('play-button');
        }
      });

      setInterval(function() {
        soundPosition = sound.position / sound.durationEstimate;
        waveform.update({ data: data });

        var time = Math.floor(sound.position / 1000.0);
        var min = Math.floor(time / 60), sec = time % 60;
        index.text(min + ':' + (sec >= 10 ? sec : '0'+sec));
      }, 50);


      scrubber.click(function(e) {
        e.preventDefault();

        var offx = e.clientX - scrubber.offset().left;
        sound.setPosition((offx / scrubber.width()) * sound.durationEstimate);
        player.find('.play-button').trigger('click');
      });

      scrubber.mousemove(function(e) {
        var offx = e.clientX - scrubber.offset().left;
        hoverPosition = offx / scrubber.width();
        seekbar.css('left', offx);
      }).mouseout(function() { hoverPosition = -1 });
    });
  });
});


$(document).ready(function(){
    // resizable textarea for edit page
    $('.post_content textarea').autosize();  
    
    // adjust image margins to fit baseline in posts
    $('.post_content p > img').baseline(27);  
});
